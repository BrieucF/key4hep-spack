variables:
  K4_JOBTYPE:
    value: Nightly
    description: "Possible Values: Release, Nighlies, CI. A Release job is deployed to sw.hsf.org and uses the latest tags. A Nightlies job is deployed to sw-nightlies.hsf.org and uses the HEAD of the defined repos. A CI build is like a nightly build, but not deployed, and builds local checkouts of the PRs given in K4_CI_URLS"
  K4_OS:
    value: centos7
    description: centos7, ubuntu or almalinux9
  NIGHTLY_FROM_SCRATCH:
    value: "no"
    description: yes or no, whether the nightly build is done from scratch (all packages are compiled) or the previous build from scratch is used as upstream
  K4_CI_URLS:
    value: ""
    description: "A whitespace-separated list of urls for github prs (for repositories for which there is a spack recipe). Example: https://github.com/iLCSoft/SIO/pull/17/ https://github.com/AIDASoft/podio/pull/287"
  SPACK_VERSION:
    value: ""
    description: "A git ref to check out after cloning the spack repository. Leaving this blank will use the latest HEAD (recommended)."
  SPACK_INSTALL_ARGUMENTS:
    value: "--test=root --fresh --no-check-signature --show-log-on-error"
    description: "Arguments to be passed to spack install"

stages:
    - prepare-spack
    - compilation
    - buildtest
    - deployment
    - wait
    - installtest
    - not-used

test-build:
    image: gitlab-registry.cern.ch/key4hep/k4-deploy/ubuntu-build
    stage: compilation
    rules:
      - if: '$K4_JOBTYPE == "Test"'
        changes:
            - never
    script: |
        echo test-build
        rm nonexistent
    tags:
        - alma9

test-deploy:
    image: gitlab-registry.cern.ch/key4hep/k4-deploy/ubuntu-build
    stage: deployment
    rules:
      - if: '$K4_JOBTYPE == "Test"'
        changes:
            - never
    script:
        echo test-build
    tags:
        - alma9
    resource_group: test_group

.clone-spack: &clone-spack |
    cd /
    git clone https://github.com/key4hep/key4hep-spack --depth 1
    git clone https://github.com/spack/spack
    cd spack
    git checkout $(cat /key4hep-spack/.latest-commit)
    cd ..
    source spack/share/spack/setup-env.sh

.build-release: &build-release |
    cd /key4hep-spack/environments/key4hep-release
    spack env activate .
    spack add key4hep-stack+devtools

.build-nightly: &build-nightly |
    cd /key4hep-spack/environments/key4hep-nightly
    python3 /key4hep-spack/scripts/fetch_nightly_versions.py >> spack.yaml
    spack env activate .
    echo $(TZ=Europe/Zurich date -I) > .date
    spack config add "config:install_tree:root: /cvmfs/sw-nightlies.hsf.org/key4hep/releases/$(cat .date)"

    if [ $(echo "$NIGHTLY_FROM_SCRATCH" | tr '[:upper:]' '[:lower:]') = "no" ]; then
        rel=$(find /cvmfs/sw-nightlies.hsf.org/key4hep/releases/ -maxdepth 3 -type f -wholename "*$K4_OS*/.scratch" | sort -r | head -1)
        rel=$(dirname $rel)
        echo "rel is $rel"
        spack config add "upstreams:nightly-from-scratch:install_tree: $rel"
    fi
    cat spack.yaml
    spack concretize
    nohup spack install&
    sleep 2
    nohup spack install&
    sleep 2
    spack install

.copy-cvmfs: &copy-cvmfs |
    ls -lah /root/.ssh
    rel=$(find /cvmfs/sw-nightlies.hsf.org/key4hep/releases/ -maxdepth 2 -type d -name "*$K4_OS*" | sort -r | head -1)
    mkdir -p /cvmfs/sw-nightlies.hsf.org/key4hep/releases/latest/
    ln -sf $rel /cvmfs/sw-nightlies.hsf.org/key4hep/releases/latest/
    git clone https://github.com/key4hep/key4hep-spack --depth 1
    cp key4hep-spack/.latest-commit $rel/.spack-commit
    cd key4hep-spack; echo $(git rev-parse HEAD) > $rel/.key4hep-spack-commit
    if [ $(echo "$NIGHTLY_FROM_SCRATCH" | tr '[:upper:]' '[:lower:]') = "yes" ]; then
          touch $rel/.scratch
    fi
    if [ -d $rel/../.spack-db ]; then
        mv $rel/../.spack-db $rel/
    fi
    ssh -o "StrictHostKeyChecking=no" cvswnighthsforg@lxcvmfs110.cern.ch './open_transaction.sh'

    rsync -avuPq $rel cvswnighthsforg@lxcvmfs110.cern.ch:$(dirname $rel)
    rsync -avuP  /cvmfs/sw-nightlies.hsf.org/key4hep/releases/latest cvswnighthsforg@lxcvmfs110.cern.ch:/cvmfs/sw-nightlies.hsf.org/key4hep/releases

    ssh cvswnighthsforg@lxcvmfs110.cern.ch './close_transaction.sh'

.template-deploy-cvmfs: &template-deploy-cvmfs
    image: gitlab-registry.cern.ch/key4hep/k4-deploy/ubuntu-build
    tags:
        - build
    stage: deployment
    script:
        -  *copy-cvmfs
    resource_group: production

.template-build: &template-build
     stage: compilation
     tags:
         - build

.template-build-release: &template-build-release
  <<: *template-build
  rules:
      - if: '$K4_JOBTYPE =~ /Release/'
        changes:
            - never
  script:
      - *clone-spack
      - *build-release

.template-build-nightly: &template-build-nightly
  <<: *template-build
  tags:
      - nightly
  rules:
      - if: '$K4_JOBTYPE =~ /Nightly/'
        changes:
            - never
  script:
      - *clone-spack
      - *build-nightly

build-ubuntu-release:
    image: gitlab-registry.cern.ch/key4hep/k4-deploy/ubuntu-build
    tags:
        - release
        - ubuntu
    <<: *template-build-release

build-centos7-release:
    image: gitlab-registry.cern.ch/key4hep/k4-deploy/centos7-build
    tags:
        - release
        - centos7
    <<: *template-build-release

build-alma9-release:
    image: gitlab-registry.cern.ch/key4hep/k4-deploy/alma9-build
    tags:
        - release
        - alma9
    <<: *template-build-release

build-nightly-ubuntu:
    <<: *template-build-nightly
    image: gitlab-registry.cern.ch/key4hep/k4-deploy/ubuntu-build
    tags:
        - ubuntu
    rules:
      - if: '$K4_JOBTYPE == "Nightly"  && ($K4_OS == "ubuntu" || $K4_OS == "all")'
        changes:
            - never

build-nightly-centos7:
    <<: *template-build-nightly
    image: gitlab-registry.cern.ch/key4hep/k4-deploy/centos7-build
    tags:
        - centos7
    rules:
      - if: '$K4_JOBTYPE =~ /Nightly/ && ($K4_OS == "centos7" || $K4_OS == "all")'
        changes:
            - never

build-nightly-alma9:
    <<: *template-build-nightly
    image: gitlab-registry.cern.ch/key4hep/k4-deploy/alma9-build
    tags:
        - alma9
    rules:
      - if: '$K4_JOBTYPE =~ /Nightly/ && ($K4_OS == "almalinux9" || $K4_OS == "all")' 
        changes:
            - never

deploy-nightly-ubuntu:
    <<: *template-deploy-cvmfs
    needs:
        - build-nightly-ubuntu
    tags:
        - ubuntu
    rules:
      - if: '$K4_OS == "ubuntu" || $K4_OS == "all"'
        changes:
            - never

deploy-nightly-centos7:
    <<: *template-deploy-cvmfs
    needs:
        - build-nightly-centos7
    tags:
        - centos7
    rules:
      - if: '$K4_OS == "centos7" || $K4_OS == "all"'
        changes:
            - never

deploy-nightly-alma9:
    <<: *template-deploy-cvmfs
    needs:
        - build-nightly-alma9
    tags:
        - alma9
    rules:
      - if: '$K4_OS == "almalinux9" || $K4_OS == "all"'
        changes:
            - never

.delete-last-nightly:
    script:
        rel=$(find /cvmfs/sw-nightlies.hsf.org/key4hep/releases/ -maxdepth 2 -type d -name "*$K4_OS*" | sort -r | head -1)
        mkdir -p /cvmfs/sw-nightlies.hsf.org/key4hep/releases/latest/
        ln -sf $rel /cvmfs/sw-nightlies.hsf.org/key4hep/releases/latest/
        ssh -o "StrictHostKeyChecking=no" cvswnighthsforg@lxcvmfs110.cern.ch './open_transaction.sh'
        rsync -avuPq $rel cvswnighthsforg@lxcvmfs110.cern.ch:$(dirname $rel)
        rsync -avuP  /cvmfs/sw-nightlies.hsf.org/key4hep/releases/latest cvswnighthsforg@lxcvmfs110.cern.ch:/cvmfs/sw-nightlies.hsf.org/key4hep/releases

        ssh cvswnighthsforg@lxcvmfs110.cern.ch './close_transaction.sh'

#### CI builds of key4hep-stack
# This is intended to run more complex ci builds, possibly comprising PRs in several repos
# this job expects the following setup on the runner: 
# * environment variables GITHUB_TOKEN and GITHU B_USER
#   set in .bashrc or via gitlab ci - to be able to query the commits on github
#  
build-spack-ci:
    stage: not-used
    tags:
        - cvmfs
    parallel:
        matrix:
          - SPACKENV: 
            - key4hep-ci
    only:
      refs:
          - web
      variables:
          - $K4_JOBTYPE == "CI"
    script:
        - |
          #set up spack inside the k4-spack repo
          source spack/share/spack/setup-env.sh
          export KEY4HEP_RELEASE_VERSION=master-ci-`date -I`
          python scripts/fetch_nightly_versions.py >> environments/$SPACKENV/spack.yaml
          cd environments/$SPACKENV
          source setup_clingo_centos7.sh
          spack env activate .
          git clone https://gitlab.cern.ch/sft/sft-spack-repo.git
          spack repo add ./sft-spack-repo
          spack add key4hep-stack@${KEY4HEP_RELEASE_VERSION}
          for K4_CI_URL in $K4_CI_URLS; do
            # setup development repos
            export PR_NUMBER=`echo $K4_CI_URL | grep -oP "pull/\K[0-9]*"`
            export PR_REPO_URL=`echo $K4_CI_URL | grep -oP "\K.*/pull/"`
            export PR_REPO_URL=`echo ${PR_REPO_URL/\/pull\//}`
            export PACKAGE_NAME=`echo ${PR_REPO_URL} | rev | cut -d "/" -f -1 | rev `
            export PACKAGE_NAME=`echo $PACKAGE_NAME |  tr '[:upper:]' '[:lower:]'`
            echo "PACKAGE_NAME: ${PACKAGE_NAME}"
            echo "PR_NUMBER: ${PR_NUMBER}"
            echo "PR_REPO_URL: ${PR_REPO_URL}"
            #sed -i "/${PACKAGE_NAME}@commit/d" ./spack.yaml
            mkdir $PACKAGE_NAME; cd $PACKAGE_NAME
            git clone $PR_REPO_URL .
            #spack add ${PACKAGE_NAME}@commit.`git rev-parse HEAD`
            spack develop -p $PWD ${PACKAGE_NAME}@commit.`git rev-parse HEAD`
            git fetch origin pull/${PR_NUMBER}/head:testbranch${PR_NUMBER}
            git checkout testbranch${PR_NUMBER}
            cd ..
          done;
          # compile onwards and upwards
          spack install ${SPACK_INSTALL_ARGUMENTS}

#### Nightly build of key4hep-stack
# this job expects the following setup on the runner:
# * environment variables GITHUB_TOKEN and GITHUB_USER
#   set in .bashrc or via gitlab ci - to be able to query the commits on github
# *  (for the nightlies) existing installation of key4hep-stack (stable version) in /cvmfs/sw.hsf.org/spackages
#   (or whatever is defined in upstreams.yaml)
#   this may be read-only - could be delivered by cvmfs
# * writeable directory in /cvmfs/sw-nightlies.hsf.org 
#   (or whatever is defined in config.yaml)
#  
# for the cvmfs deployment:
# * the gitlab-runner user must be able to ssh into the cvmfs publisher
# * the cvmfs publisher must be able to rsync with the build machine

#### Release build of key4hep-stack
# this job expects the following setup on the runner:

# * writeable directory in /cvmfs/sw.hsf.org 
#   (or whatever is defined in config.yaml)
#  
# for the cvmfs deployment:
# * the gitlab-runner user must be able to ssh into the cvmfs publisher
# * the cvmfs publisher must be able to rsync with the build machine


buildtest-spack-release:
    stage: buildtest
    parallel:
        matrix:
          - SPACKENV: 
            - key4hep-release
            #- key4hep-debug
    tags:
        - k4-build-spack-release
    only:
      refs:
          - tags
          - schedules # Only execute this on scheduled "nightly" pipelines
          - web
      variables:
          - $K4_JOBTYPE == "Release"
    script:
        - echo ${SPACKENV} # debug printout
        - ls environments/${SPACKENV} # debug printout
        # resolve dynamic variable name
        - K4_SETUP_PATH=${SPACKENV//-/}_PATH
        - echo ${!K4_SETUP_PATH} # debug printout
        # run tests, to fail early, even before publishing
        - source ${!K4_SETUP_PATH}/setup.sh
        - ./scripts/ci_install_tests.sh


test-cvmfs-release:
    stage: installtest
    # needs:["setup_spack_push", "deploy-cvmfs-release", "build-spack-release", "wait-cvmfs-release"]
    parallel:
        matrix:
          - SPACKENV: 
            - key4hep-release
            #- key4hep-debug
    tags:
        - cvmfs
    only:
      refs:
          - tags
          - schedules # Only execute this on scheduled "nightly" pipelines
          - web
      variables:
          - $K4_JOBTYPE == "Release"
    script:
        # resolve dynamic variable name
        - K4_LATEST_SETUP_PATH=${SPACKENV//-/}_PATH
        - echo ${!K4_LATEST_SETUP_PATH} # debug printout
        - source ${!K4_LATEST_SETUP_PATH}/setup.sh
        - ./scripts/ci_install_tests.sh